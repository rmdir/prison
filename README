mod_prison : is an Apache httpd module that attempt to put httpd
children in a very restrictive context :

- chroot with no need of shared libs
- network restrictions
- system calls restrictions
- CPU stickiness and limitation
- Memory usage limit

Unlike mod_unixd restrictions (ChrootDir, RLimit), mod_prison create
a global restricted context and attach each child in it.

Currently mod_prison is a FreeBSD only stuff using jail, rctl and
cpuset.

DEPENDENCIES

- FreeBSD version that supports libjail (> 7.2).
check ldconfig -r | grep jail

- rctl compiled into the kernel
options RACCT
options RCTL

- Apache httpd-2.4 compiled with dso support (2.2 may work
but is untested).

INSTALL

Simply uses the Makefile : make && make install

You can specify apxs path when building :
make APXS=/usr/local/httpd/bin/apxs

By default PARANOID is set. You can remove it by editing the Makefile

USAGE

1) PrisonDir : the directory we will be jailed on

DocumentRoot must be relative to this path so you must use httpd -T
to start Apache. If PARANOID is set at compile time, PrisonDir must
be owned by root and not be world or group writable.

Eg:
PrisonDir /usr/local/www
DocumentRoot /sites

2) PrisonIP : A single ipv4 or ipv6 string repersentation (default none).

Apache still bind everything specified in Listen. PrisonIP is just used for
script stuff like database connections, dns lookup...
If PARANOID is set you can't use INADDR_ANY (0.0.0.0).

Eg:
PrisonIP 192.168.0.1
PrisonIP ::1

3) PrisonSecurity : None|ALL|IPC

NONE : security settings are inherit from the system.

ALL : restrict system calls

The idea is to restrict systems operations even if the attacker gains root
privileges.

- disallow SysV IPC.
- disallow row devices acces (/dev/io, /dev/mem, /dev/kmem, newfs).
- disallow loding modules into the kernel.
- reduce the possibility to have information about mountpoints.
- disallow row sockets
- disallow changing IP filter rules
- disallow chflags
- disallow mount and quota management
- limit socket creation to IPv4, IPv6 and unix

IPC : like ALL but SysV IPC are allowed (useful for apc).

The default is NONE (ALL if PARANOID is set).

4) PrisonCPU : the CPU in which children will be execute.

- a single cpu. Eg:
PrisonCPU 1
- a list of cpu. Eg:
PrisonCPU 1,2,6
- a cpu range. Eg
PrisonCPU 8-10 # means 8,9 and 10

5) PrisonMemory : total of memory usable within the jail.

Args are : report deny
Eg:
PrisonMemory 900M 1G

This means that when the total of all children memory usage will be of
900MB an event will be reported (via devd on FreeBSD). When this total
is 1GB further usage will be denied.

Warning : usage is not allocation (look at the difference between SIZE
and RES in a top command). This rule apply to the effective memory use.
Allocation should be larger.

Zero means infinite. Eg:
PrisonMemory 512k 0 # Report at 512k. Never deny.

On FreeBSD vm.overcommit has to be set to 1, otherwise the processes will
be pushed in swap by deny.


EXAMPLE

# grep Prison conf/httpd.conf
PrisonDir /usr/local/httpd/htdocs
PrisonIP ::1
PrisonCPU 1
PrisonSecurity IPC
PrisonMemory 200M 256M
# ./bin/httpd -T
# jls jid name host.hostname ip4.addr ip6.addr path
158 plop_rmdir_fr plop.rmdir.fr - ::1 /usr/local/httpd/htdoc
# ps auxw -o jid | grep http
root 56821 0.0 0.2 33632 4380 ?? Ss 2:29PM 0:00.17 ./httpd -T 0
root 56822 0.0 0.2 33632 4392 ?? S 2:29PM 0:00.22 ./httpd -T 0
joris 56823 0.0 0.3 49380 5224 ?? SJ 2:29PM 0:00.61 ./httpd -T 158
joris 56824 0.0 0.3 49380 5224 ?? SJ 2:29PM 0:00.60 ./httpd -T 158
joris 56825 0.0 0.3 49380 5224 ?? SJ 2:29PM 0:00.62 ./httpd -T 158
joris 56826 0.0 0.3 49380 5224 ?? SJ 2:29PM 0:00.70 ./httpd -T 158
joris 56827 0.0 0.3 49380 5224 ?? SJ 2:29PM 0:00.67 ./httpd -T 158
joris 56828 0.0 0.3 49380 5224 ?? SJ 2:29PM 0:00.70 ./httpd -T 158
joris 63943 0.0 0.1 18456 1812 1 S+ 5:27PM 0:00.00 grep http 0
# sockstat -j 158
sockstat -j 158
USER COMMAND PID FD PROTO LOCAL ADDRESS FOREIGN ADDRESS
joris httpd 56828 3 tcp4 6 *:8088 *:*
joris httpd 56828 4 tcp4 *:* *:*
joris httpd 56827 3 tcp4 6 *:8088 *:*
joris httpd 56827 4 tcp4 *:* *:*
joris httpd 56826 3 tcp4 6 *:8088 *:*
joris httpd 56826 4 tcp4 *:* *:*
joris httpd 56825 3 tcp4 6 *:8088 *:*
joris httpd 56825 4 tcp4 *:* *:*
joris httpd 56824 3 tcp4 6 *:8088 *:*
joris httpd 56824 4 tcp4 *:* *:*
joris httpd 56823 3 tcp4 6 *:8088 *:*
joris httpd 56823 4 tcp4 *:* *:*
# cpuset -g -j 158
jail 158 mask: 1
# rctl -l process:56823
jail:plop_rmdir_fr:memoryuse:deny=268435456
jail:plop_rmdir_fr:memoryuse:devctl=209715200
# curl -i http://www.rmdir.fr:8088/sysctl.cgi
HTTP/1.1 200 OK
Date: Wed, 10 Oct 2012 16:24:38 GMT
Server: Apache/2.4.3 (Unix)
Transfer-Encoding: chunked
Content-Type: text/plain


security.jail.jailed: 1
security.jail.jail_max_af_ips: 255
security.jail.set_hostname_allowed: 0
security.jail.socket_unixiproute_only: 1
security.jail.sysvipc_allowed: 1
security.jail.allow_raw_sockets: 0
security.jail.chflags_allowed: 0
security.jail.mount_allowed: 0
security.jail.mount_devfs_allowed: 0
security.jail.mount_nullfs_allowed: 0
security.jail.mount_procfs_allowed: 0
security.jail.mount_zfs_allowed: 0
security.jail.enforce_statfs: 2
security.jail.devfs_ruleset: 0
security.jail.param.jid: 0
security.jail.param.parent: 0
security.jail.param.name: 256
security.jail.param.path: 1024
security.jail.param.securelevel: 0
security.jail.param.enforce_statfs: 0
security.jail.param.devfs_ruleset: 0
security.jail.param.persist: 0
security.jail.param.vnet: 0
security.jail.param.dying: 0
security.jail.param.children.cur: 0
security.jail.param.children.max: 0
security.jail.param.host.: 0
security.jail.param.host.hostname: 256
security.jail.param.host.domainname: 256
security.jail.param.host.hostuuid: 64
security.jail.param.host.hostid: 0
security.jail.param.cpuset.id: 0
security.jail.param.ip4.: 0
security.jail.param.ip4.saddrsel: 0
security.jail.param.ip6.: 0
security.jail.param.ip6.saddrsel: 0
security.jail.param.allow.set_hostname: 0
security.jail.param.allow.sysvipc: 0
security.jail.param.allow.raw_sockets: 0
security.jail.param.allow.chflags: 0
security.jail.param.allow.quotas: 0
security.jail.param.allow.socket_af: 0
security.jail.param.allow.mount.: 0
security.jail.param.allow.mount.devfs: 0
security.jail.param.allow.mount.nullfs: 0
security.jail.param.allow.mount.procfs: 0
security.jail.param.allow.mount.zfs: 0
kern.securelevel: 3



BUGS AND STATUS

This is work in progress. It brakes graceful restart (httpd -k graceful)
and conflict with unixd ChrootDirectory.

The main problem in implementation is the jail is a kernel context which
has to be set persistent before there is any process in it but not
persistent, if you want it to die at the same time as httpd.

Currently everything is set in post_config
- create and setup the jail
- fork a process that wait a few time before setting it non persistent.

It sounds like a hack I really hesitate to make things much more complicate
with some IPC. The current implementation has around no overhead.

SEE ALSO

mod-jail : http://code.google.com/p/mod-jail/
	 

